{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Gertrude is platform for creating lightweight and sustainable digital editions with accompanying documentation and course materials. Gertrude was designed within the small liberal arts college context in which project teams are small, but may include technologists, librarians, scholars, and students. The platform combines TEI-XML encoded documents, the static site generator Jekyll , and the JavaScript library CETEIcean to publish standards-compliant editions via a minimal computing method. Critically, the project includes detailed documentation for setting up and customizing the platform, as well as an undergraduate-level syllabus for a course on digital editions. Gertrude is named after Gertrude Jekyll, a garden designer of the Arts and Crafts movement. Like gardening, the process of creating a digital edition is slow, iterative, and privileges maintenance over innovation. Impetus Gertrude began in 2019 as a way to share the results of multiple digital edition projects ( Huon d'Auvergne and Digital Editions at W&L ) created by the Digital Humanities initiative at Washington and Lee University. Recognizing the need for additional options for publishing digital editions, Digital Humanities Librarian Mackenzie Brooks started documenting and creating a generic form of the platform. In 2022, Quinn Dombrowski published the article, \" Minimizing Computing Maximizes Labor ,\" in a special issue of Digital Humanities Quarterly on minimal computing which does an excellent job of laying out the challenges of implementing minimal computing projects - namely, the question of who is performing the technical labor. Their paper proposes additional \"infrastructural interventions\" - of which Gertude attempts to be just one. \"When going \u201cminimal\u201d requires a great deal of technical labor, what implications does that have for its adoption by scholars without ongoing technical support or the money or connections to delegate that work? What is the added emotional labor for technical collaborators who are only allowed to \u201cconsult\u201d with scholars, when they attempt to coach scholars through implementing a minimal computing site on their own? What opportunities are lost when a web development methodology cannot reasonably be taught in a hands-on way in a short workshop? After describing these challenges, this paper proposes that an infrastructural intervention \u2014 encompassing everything from writing better documentation, tutorials, and templates, to developing interfaces that mediate between users and technical complexity \u2014 is necessary to realize the potential of minimal computing as a framework for sustainable websites.\" Dombrowski, Quinn. \u201cMinimizing Computing Maximizes Labor.\u201d Digital Humanities Quarterly, vol. 16, no. 2, 2022. http://www.digitalhumanities.org/dhq/vol/16/2/000594/000594.html . Ethos Gertrude is intentionally designed to fill a gap in the digital edition and documentation landscape. It is not an innovative new tool, but rather the combination of existing software to create a productive development environment for small teams with a small amount of technical ability. It keeps pedagogy at its heart. The Gertrude documentation is aimed at the advanced undergraduate - perhaps a student who is embarking on a summer research experience. It imagines a technologist who can troubleshoot, but not write software from scratch. It imagines a faculty member who is curious and excited but not fluent in Digital Humanities methods. The documentation attempts to fill in the blanks between existing tutorials and solve common issues. It also addresses social and institutional realities when undertaking digital projects. Gertrude is indebted to the countless individuals and teams who have participated in the Institute for Liberal Arts Digital Scholarship . Table of Contents Contact","title":"Home"},{"location":"#welcome","text":"Gertrude is platform for creating lightweight and sustainable digital editions with accompanying documentation and course materials. Gertrude was designed within the small liberal arts college context in which project teams are small, but may include technologists, librarians, scholars, and students. The platform combines TEI-XML encoded documents, the static site generator Jekyll , and the JavaScript library CETEIcean to publish standards-compliant editions via a minimal computing method. Critically, the project includes detailed documentation for setting up and customizing the platform, as well as an undergraduate-level syllabus for a course on digital editions. Gertrude is named after Gertrude Jekyll, a garden designer of the Arts and Crafts movement. Like gardening, the process of creating a digital edition is slow, iterative, and privileges maintenance over innovation.","title":"Welcome"},{"location":"#impetus","text":"Gertrude began in 2019 as a way to share the results of multiple digital edition projects ( Huon d'Auvergne and Digital Editions at W&L ) created by the Digital Humanities initiative at Washington and Lee University. Recognizing the need for additional options for publishing digital editions, Digital Humanities Librarian Mackenzie Brooks started documenting and creating a generic form of the platform. In 2022, Quinn Dombrowski published the article, \" Minimizing Computing Maximizes Labor ,\" in a special issue of Digital Humanities Quarterly on minimal computing which does an excellent job of laying out the challenges of implementing minimal computing projects - namely, the question of who is performing the technical labor. Their paper proposes additional \"infrastructural interventions\" - of which Gertude attempts to be just one. \"When going \u201cminimal\u201d requires a great deal of technical labor, what implications does that have for its adoption by scholars without ongoing technical support or the money or connections to delegate that work? What is the added emotional labor for technical collaborators who are only allowed to \u201cconsult\u201d with scholars, when they attempt to coach scholars through implementing a minimal computing site on their own? What opportunities are lost when a web development methodology cannot reasonably be taught in a hands-on way in a short workshop? After describing these challenges, this paper proposes that an infrastructural intervention \u2014 encompassing everything from writing better documentation, tutorials, and templates, to developing interfaces that mediate between users and technical complexity \u2014 is necessary to realize the potential of minimal computing as a framework for sustainable websites.\" Dombrowski, Quinn. \u201cMinimizing Computing Maximizes Labor.\u201d Digital Humanities Quarterly, vol. 16, no. 2, 2022. http://www.digitalhumanities.org/dhq/vol/16/2/000594/000594.html .","title":"Impetus"},{"location":"#ethos","text":"Gertrude is intentionally designed to fill a gap in the digital edition and documentation landscape. It is not an innovative new tool, but rather the combination of existing software to create a productive development environment for small teams with a small amount of technical ability. It keeps pedagogy at its heart. The Gertrude documentation is aimed at the advanced undergraduate - perhaps a student who is embarking on a summer research experience. It imagines a technologist who can troubleshoot, but not write software from scratch. It imagines a faculty member who is curious and excited but not fluent in Digital Humanities methods. The documentation attempts to fill in the blanks between existing tutorials and solve common issues. It also addresses social and institutional realities when undertaking digital projects. Gertrude is indebted to the countless individuals and teams who have participated in the Institute for Liberal Arts Digital Scholarship .","title":"Ethos"},{"location":"#table-of-contents","text":"","title":"Table of Contents"},{"location":"#contact","text":"","title":"Contact"},{"location":"about/","text":"About This is Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is some code a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. a couple headings Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. just to test Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#this-is","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is some code","title":"This is"},{"location":"about/#a-couple-headings","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"about/#a-couple-headings_1","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test_1","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"about/#a-couple-headings_2","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test_2","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"about/#a-couple-headings_3","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test_3","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"about/#a-couple-headings_4","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test_4","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"about/#a-couple-headings_5","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"a couple headings"},{"location":"about/#just-to-test_5","text":"Here is a bunch of text though. Here is an extremely complex problem. Here is a bunch of text though. Here is an extremely complex problem.","title":"just to test"},{"location":"getting-started-non-tech/","text":"Getting Started for Non-Tech People Digital Editions A digital edition is a particular version of a text published online. Unlike today, when an idea can go from our head to the screens of millions in half a second, texts of the past passed through the hands of multiple people and physical formats. A poet may have drafted several versions of their poem before typing the final version. A politician may have had their speech edited before it reached the newspaper. There are countless reasons that the myriads of people - printers, publishers, typesetters, family members - may have consciously or unconsciously changed words at some point between the author's hand and the final material form. Scholars who study these changes, their contexts, and their implications are performing textual scholarship . Scholars use their training, judgment, and the guidance of particular editorial theories to transcribe, edit, enrich, and ultimately create an edition. Some editions may make arguments for a \"authoritative\" version of a text, while others are more interested in uncovering texts that may not be widely accessible. In the past, an edition would have been confined to a single or set of books, but with the affordances of software, an edition can be reimagined. For example: footnotes can be embedded directly as pop-up windows or a button can toggle between the uncorrected and corrected versions of a text. Computational textual analysis can be performed on large amounts of a text (a corpus). Scholars are not limited in the amount of contextual material they can include. For more on definitions of scholarly editions, see Patrick Sahle's chapter, \"What is a Scholarly Digital Edition?\" in Digital Scholarly Editing: Theories and Practices available open access on JSTOR. Examples There are countless examples of digital edition projects. The ones below were chosen to illustrate particular advantges of digital editions. The Shelley-Godwin Archive - hosts a version of Frankenstein with a toggle to show the editorial interventions of Percy Shelley. Huon d'Auvergne Digital Archive - the Turin manuscript was burned in a fire, but the text has been reconstructed and restored from a 19th century transcription. Furnace and Fugue - this edition of Atalanta fugiens uses the Music Encoding Initiative and allows users to hear the music alongside the manuscript image and the transcription. Publishing The majority of digital editions use the guidelines of the Text Encoding Initiative (TEI) to encode their texts in an XML-based file format. The TEI is both a consortium of people and institutions as well as a technical standard. While it is possible to paste some text onto a website and call it an edition, the process of taking a text from print to digital is ultimately an interpretive act. The TEI guidelines and the TEI-XML format exist to 1) create a semantically-meaningful and machine-readable format to your text and 2) document and enrich the editorial decisions and process. Practically, this means that texts are put into a text file and XML tags (also called elements) surround the text to add structure and other information. This is what is known as semantic markup . The tags tell the computer that a piece of text exists as a separate chunk of content and what the role or function of that content is in relation to the whole text. TEXT EDITORS!!!! Here's the basic template: <TEI xmlns=\"http://www.tei-c.org/ns/1.0\"> <teiHeader> <!-- ... --> </teiHeader> <text> <front> <!-- front matter of copy text, if any, goes here --> </front> <body> <!-- body of copy text goes here --> </body> <back> <!-- back matter of copy text, if any, goes here --> </back> </text> </TEI> You can learn more about TEI from their website and in other parts of this documentation. Once the texts have been encoded, they need to be published to the web. However, in what can feel like a backward step, the TEI-XML files need to be transformed into another format so they can be displayed in modern browsers. There are many options for how to do this and your choice will depends on your resources and the goals of the project. Gertrude is just one possible route, others include TEI Publisher built on the XML-based database eXistDB or XSLT stylesheets that convert your TEI to HTML. Gertrude uses the JavaScript library CETEIcean to convert the TEI to custom HTML elements so they can customized using CSS and JavaScript. Web development Some of the main concepts and issues to be aware of: Servers Websites are hosted on servers , which are essentially just files and folders on someone else's computer that is connected to the internet in a particular way. Often, projects are developed locally on a single computer before being published or deployed to a server. A staging server or location might also be helpful for testing. HTML, CSS, and JavaScript The core languages used by websites are HTML, CSS, and JavaScript. HTML looks similar to TEI-XML and creates the structure of a page. CSS is the list of styles that tells the browser how to display the HTML (think colors, fonts, margins). JavaScript is a programming language that controls dynamic interactions that the user might have within the browser and with the website (a pop-up window or a button). Basic websites consist of just HTML, CSS, and JavaScript. These might also be called \"flat\" or \"static.\" You can upload these files to a server to create your website, then never have to touch them again and the site will be relatively stable. In contrast, today most websites are run by web applications that include databases (i.e. mySQL), programming languages (i.e. PHP), and more complex server software (i.e. Apache). Web applications require more administration by IT professionals to keep them secure, up to date, and accessible. Web applications can also host more complex and custom projects and data. Websites with individual user accounts or dashboards are built with web applications. Static websites have reemerged in popularity in recent years because they are more sustainable and secure. They also fall under the label of minimal computing . However, they still require technical know-how to execute. There are numerous options for creating static sites, including just writing HTML by hand. Gertude uses the static site generator Jekyll , but there are other options like Hugo , NextJS , and Gatsby . Jekyll is now an older platform, not necessarily as sexy as other options, but it has proved reliable over time. To create a website with Jekyll, you will need to install and run the Ruby programming language on your computer. If you aren't much of a tech person, this part is a little scary and annoying. It's a task best suited to the tech person with a Mac who is comfortable using the command line. Jekyll consists of some Ruby code that will take your content and your templates and generate a static website. Fortunately, once the site is created, there are easier options for editing and adding content. Many people who write code or other text-based projects use version control software called git and the website component known as GitHub . These two components allow teams to collaborate on code or text-based projects without having to send files to one other. Changes are tracked and can be reverted. GitHub also provides a way to publish websites with a service called GitHub Pages. It uses Jekyll by default, but you can also deploy other types of websites. Your default URL will be https://yourusername.github.io . The Gertrude project will assume that project team members will make edits to content via the GitHub website. You might want a specific domain or URL for your project. A domain is the address of a project and can point to any server. You can purchase a domain on a site like Hover.com . If you want a URL that includes the .edu of your institution, you will need to work with your IT department and possibly abide by additional policies. Domains are possible to change or redirect, but it can be annoying and messy, so best to think through this decision early on. Web accessibility. Institutional resources If you're a non-tech person, you will probably want to enlist the assistant of an IT or library colleague who can collaborate on this project. You should ensure that this type of work is within the bounds of their job description. If you want your institution to host the project from a technical standpoint, you should pursue a memorandum of understanding about resources and length of time of support. IT departments can be hesitant to host one-off, custom projects. The Socio-Technical Sustainability Roadmap is a great resource for thinking through the lifespan of your project. If you want your project URL to include a .edu domain, you will need to secure that with your IT department. You may have to be involved in updated a security certificate annually. You should consider how much storage your project will require. Digital edition projects tend to be lightweight, but there may be additional media components that will need to be hosted somewhere. If digitized images of your text are to be included, where will these images be hosted? What is the copyright situation? Gertrude is designed to work with images that have been hosted on a IIIF -compliant image server. Many digital repositories meet this standard but not all. Self-hosting images is a possibility as well. Students There are numerous ways to involve students in digital edition projects. Here are a few scenarios and recommendations: Students can transcribe, translate, edit, and encode text. Particularly after students have been oriented to a text through a class or research assistance experience, students are well-equipped to work closely with a text. Students can prototype and design the website. They can research other digital editions, make a list of desired features, create a wireframe or mockup of the website, and design logos or other branding materials. This is an area where students can bring expertise and grow in their web design or user experience skills. Students with more of a tech or computer science background can contribute to setup and development of the platform. Note: not all computer science programs teach the front-end web development skills required for Gertrude. Students may have picked up these skills on their own and be amazing developers, but it can't be assumed that a CS major brings the necessary training. Students should be required to thoroughly document their code and any technical decisions so that the work can be picked up by someone else in the future. Students should not be the sole owners of logins or admin rights.","title":"For Non-Tech People"},{"location":"getting-started-non-tech/#getting-started-for-non-tech-people","text":"","title":"Getting Started for Non-Tech People"},{"location":"getting-started-non-tech/#digital-editions","text":"A digital edition is a particular version of a text published online. Unlike today, when an idea can go from our head to the screens of millions in half a second, texts of the past passed through the hands of multiple people and physical formats. A poet may have drafted several versions of their poem before typing the final version. A politician may have had their speech edited before it reached the newspaper. There are countless reasons that the myriads of people - printers, publishers, typesetters, family members - may have consciously or unconsciously changed words at some point between the author's hand and the final material form. Scholars who study these changes, their contexts, and their implications are performing textual scholarship . Scholars use their training, judgment, and the guidance of particular editorial theories to transcribe, edit, enrich, and ultimately create an edition. Some editions may make arguments for a \"authoritative\" version of a text, while others are more interested in uncovering texts that may not be widely accessible. In the past, an edition would have been confined to a single or set of books, but with the affordances of software, an edition can be reimagined. For example: footnotes can be embedded directly as pop-up windows or a button can toggle between the uncorrected and corrected versions of a text. Computational textual analysis can be performed on large amounts of a text (a corpus). Scholars are not limited in the amount of contextual material they can include. For more on definitions of scholarly editions, see Patrick Sahle's chapter, \"What is a Scholarly Digital Edition?\" in Digital Scholarly Editing: Theories and Practices available open access on JSTOR.","title":"Digital Editions"},{"location":"getting-started-non-tech/#examples","text":"There are countless examples of digital edition projects. The ones below were chosen to illustrate particular advantges of digital editions. The Shelley-Godwin Archive - hosts a version of Frankenstein with a toggle to show the editorial interventions of Percy Shelley. Huon d'Auvergne Digital Archive - the Turin manuscript was burned in a fire, but the text has been reconstructed and restored from a 19th century transcription. Furnace and Fugue - this edition of Atalanta fugiens uses the Music Encoding Initiative and allows users to hear the music alongside the manuscript image and the transcription.","title":"Examples"},{"location":"getting-started-non-tech/#publishing","text":"The majority of digital editions use the guidelines of the Text Encoding Initiative (TEI) to encode their texts in an XML-based file format. The TEI is both a consortium of people and institutions as well as a technical standard. While it is possible to paste some text onto a website and call it an edition, the process of taking a text from print to digital is ultimately an interpretive act. The TEI guidelines and the TEI-XML format exist to 1) create a semantically-meaningful and machine-readable format to your text and 2) document and enrich the editorial decisions and process. Practically, this means that texts are put into a text file and XML tags (also called elements) surround the text to add structure and other information. This is what is known as semantic markup . The tags tell the computer that a piece of text exists as a separate chunk of content and what the role or function of that content is in relation to the whole text. TEXT EDITORS!!!! Here's the basic template: <TEI xmlns=\"http://www.tei-c.org/ns/1.0\"> <teiHeader> <!-- ... --> </teiHeader> <text> <front> <!-- front matter of copy text, if any, goes here --> </front> <body> <!-- body of copy text goes here --> </body> <back> <!-- back matter of copy text, if any, goes here --> </back> </text> </TEI> You can learn more about TEI from their website and in other parts of this documentation. Once the texts have been encoded, they need to be published to the web. However, in what can feel like a backward step, the TEI-XML files need to be transformed into another format so they can be displayed in modern browsers. There are many options for how to do this and your choice will depends on your resources and the goals of the project. Gertrude is just one possible route, others include TEI Publisher built on the XML-based database eXistDB or XSLT stylesheets that convert your TEI to HTML. Gertrude uses the JavaScript library CETEIcean to convert the TEI to custom HTML elements so they can customized using CSS and JavaScript.","title":"Publishing"},{"location":"getting-started-non-tech/#web-development","text":"Some of the main concepts and issues to be aware of:","title":"Web development"},{"location":"getting-started-non-tech/#servers","text":"Websites are hosted on servers , which are essentially just files and folders on someone else's computer that is connected to the internet in a particular way. Often, projects are developed locally on a single computer before being published or deployed to a server. A staging server or location might also be helpful for testing.","title":"Servers"},{"location":"getting-started-non-tech/#html-css-and-javascript","text":"The core languages used by websites are HTML, CSS, and JavaScript. HTML looks similar to TEI-XML and creates the structure of a page. CSS is the list of styles that tells the browser how to display the HTML (think colors, fonts, margins). JavaScript is a programming language that controls dynamic interactions that the user might have within the browser and with the website (a pop-up window or a button). Basic websites consist of just HTML, CSS, and JavaScript. These might also be called \"flat\" or \"static.\" You can upload these files to a server to create your website, then never have to touch them again and the site will be relatively stable. In contrast, today most websites are run by web applications that include databases (i.e. mySQL), programming languages (i.e. PHP), and more complex server software (i.e. Apache). Web applications require more administration by IT professionals to keep them secure, up to date, and accessible. Web applications can also host more complex and custom projects and data. Websites with individual user accounts or dashboards are built with web applications. Static websites have reemerged in popularity in recent years because they are more sustainable and secure. They also fall under the label of minimal computing . However, they still require technical know-how to execute. There are numerous options for creating static sites, including just writing HTML by hand. Gertude uses the static site generator Jekyll , but there are other options like Hugo , NextJS , and Gatsby . Jekyll is now an older platform, not necessarily as sexy as other options, but it has proved reliable over time. To create a website with Jekyll, you will need to install and run the Ruby programming language on your computer. If you aren't much of a tech person, this part is a little scary and annoying. It's a task best suited to the tech person with a Mac who is comfortable using the command line. Jekyll consists of some Ruby code that will take your content and your templates and generate a static website. Fortunately, once the site is created, there are easier options for editing and adding content. Many people who write code or other text-based projects use version control software called git and the website component known as GitHub . These two components allow teams to collaborate on code or text-based projects without having to send files to one other. Changes are tracked and can be reverted. GitHub also provides a way to publish websites with a service called GitHub Pages. It uses Jekyll by default, but you can also deploy other types of websites. Your default URL will be https://yourusername.github.io . The Gertrude project will assume that project team members will make edits to content via the GitHub website. You might want a specific domain or URL for your project. A domain is the address of a project and can point to any server. You can purchase a domain on a site like Hover.com . If you want a URL that includes the .edu of your institution, you will need to work with your IT department and possibly abide by additional policies. Domains are possible to change or redirect, but it can be annoying and messy, so best to think through this decision early on. Web accessibility.","title":"HTML, CSS, and JavaScript"},{"location":"getting-started-non-tech/#institutional-resources","text":"If you're a non-tech person, you will probably want to enlist the assistant of an IT or library colleague who can collaborate on this project. You should ensure that this type of work is within the bounds of their job description. If you want your institution to host the project from a technical standpoint, you should pursue a memorandum of understanding about resources and length of time of support. IT departments can be hesitant to host one-off, custom projects. The Socio-Technical Sustainability Roadmap is a great resource for thinking through the lifespan of your project. If you want your project URL to include a .edu domain, you will need to secure that with your IT department. You may have to be involved in updated a security certificate annually. You should consider how much storage your project will require. Digital edition projects tend to be lightweight, but there may be additional media components that will need to be hosted somewhere. If digitized images of your text are to be included, where will these images be hosted? What is the copyright situation? Gertrude is designed to work with images that have been hosted on a IIIF -compliant image server. Many digital repositories meet this standard but not all. Self-hosting images is a possibility as well.","title":"Institutional resources"},{"location":"getting-started-non-tech/#students","text":"There are numerous ways to involve students in digital edition projects. Here are a few scenarios and recommendations: Students can transcribe, translate, edit, and encode text. Particularly after students have been oriented to a text through a class or research assistance experience, students are well-equipped to work closely with a text. Students can prototype and design the website. They can research other digital editions, make a list of desired features, create a wireframe or mockup of the website, and design logos or other branding materials. This is an area where students can bring expertise and grow in their web design or user experience skills. Students with more of a tech or computer science background can contribute to setup and development of the platform. Note: not all computer science programs teach the front-end web development skills required for Gertrude. Students may have picked up these skills on their own and be amazing developers, but it can't be assumed that a CS major brings the necessary training. Students should be required to thoroughly document their code and any technical decisions so that the work can be picked up by someone else in the future. Students should not be the sole owners of logins or admin rights.","title":"Students"},{"location":"getting-started-tech/","text":"Getting Started for Tech People Overview Components Gertrude is a customized Jekyll theme that includes the Javascript library CETEIcean for rendering TEI-XML in the browser and making it accessible to JavaScript via HTML Custom Elements. The theme itself is an adaption of Robert Love's Jekyll/Bootstrap starter project . The inclusion of Bootstrap means that you can use all of the Bootstrap classes and styles to make a responsive and modern site. Gertrude contains custom code for handling person and place names indices and for displaying images via IIIF viewers. The Gertrude documentation details how to customize the code for particular digital edition features. Gertrude also contains some Liquid templating language within the Jekyll framework for arranging and displaying content on the site. Quickstart steps Install Ruby and Jekyll on your computer. Clone the Gertrude repository to your computer. Create a GitHub repo for your project. Commit and push the project to your new repo. Customize and develop platform to your liking. Deploy the digital edition to GitHub pages or another host. Installing Ruby + Jekyll on Mac Start with Jekyll's instructions . They also recommend this document on The fastest and easiest way to install Ruby on a Mac in 2025 which is truly the most thorough walk-through you will find. You don't have to purchase the paid solution. You might also check out CollectionBuilder's documentation on installing Ruby and Jekyll. The biggest issue when setting up a development environment is ensuring that all versions of the software you're installing on your computer can work together peacefully. Ruby is a programming language that comes with particular versions. Jekyll is a Ruby gem , or code library, and it requires a number of other gems to function (once you're set up, you can see all of them in the file called Gemfile ). These code libraries are updated all the time and depend on other code libraries to have certain functions. The most troubleshooting you'll encounter will be reconciling these issues via the Stack Overflow method of Googling an error message and trying a solution. Installing Ruby + Jeykll on Windows Let's be honest: front-end web development is not easy on a Windows machine. It should only be attempted if you're confident in your abilities. Git Bash is a tool that allows you to run git from the command line in a way that is similar to the Mac (or Linux) experience. Windows Subsystem for Linux is another option for creating a more friendly environment.","title":"For tech people"},{"location":"getting-started-tech/#getting-started-for-tech-people","text":"","title":"Getting Started for Tech People"},{"location":"getting-started-tech/#overview","text":"","title":"Overview"},{"location":"getting-started-tech/#components","text":"Gertrude is a customized Jekyll theme that includes the Javascript library CETEIcean for rendering TEI-XML in the browser and making it accessible to JavaScript via HTML Custom Elements. The theme itself is an adaption of Robert Love's Jekyll/Bootstrap starter project . The inclusion of Bootstrap means that you can use all of the Bootstrap classes and styles to make a responsive and modern site. Gertrude contains custom code for handling person and place names indices and for displaying images via IIIF viewers. The Gertrude documentation details how to customize the code for particular digital edition features. Gertrude also contains some Liquid templating language within the Jekyll framework for arranging and displaying content on the site.","title":"Components"},{"location":"getting-started-tech/#quickstart-steps","text":"Install Ruby and Jekyll on your computer. Clone the Gertrude repository to your computer. Create a GitHub repo for your project. Commit and push the project to your new repo. Customize and develop platform to your liking. Deploy the digital edition to GitHub pages or another host.","title":"Quickstart steps"},{"location":"getting-started-tech/#installing-ruby-jekyll-on-mac","text":"Start with Jekyll's instructions . They also recommend this document on The fastest and easiest way to install Ruby on a Mac in 2025 which is truly the most thorough walk-through you will find. You don't have to purchase the paid solution. You might also check out CollectionBuilder's documentation on installing Ruby and Jekyll. The biggest issue when setting up a development environment is ensuring that all versions of the software you're installing on your computer can work together peacefully. Ruby is a programming language that comes with particular versions. Jekyll is a Ruby gem , or code library, and it requires a number of other gems to function (once you're set up, you can see all of them in the file called Gemfile ). These code libraries are updated all the time and depend on other code libraries to have certain functions. The most troubleshooting you'll encounter will be reconciling these issues via the Stack Overflow method of Googling an error message and trying a solution.","title":"Installing Ruby + Jekyll on Mac"},{"location":"getting-started-tech/#installing-ruby-jeykll-on-windows","text":"Let's be honest: front-end web development is not easy on a Windows machine. It should only be attempted if you're confident in your abilities. Git Bash is a tool that allows you to run git from the command line in a way that is similar to the Mac (or Linux) experience. Windows Subsystem for Linux is another option for creating a more friendly environment.","title":"Installing Ruby + Jeykll on Windows"},{"location":"quickstart/","text":"test","title":"test"},{"location":"quickstart/#test","text":"","title":"test"}]}